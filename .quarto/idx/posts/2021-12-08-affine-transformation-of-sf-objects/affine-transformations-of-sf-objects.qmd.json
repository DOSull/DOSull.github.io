{"title":"Affine transformations of sf objects","markdown":{"yaml":{"title":"Affine transformations of sf objects","description":"Manipulating simple features in `sf` is sorta simple, sorta not...\n","author":"David O'Sullivan","categories":["R","spatial"],"draft":false,"date":"04-02-2024"},"headingText":"Packages","containsRefs":false,"markdown":"\n\n```{r setup, cache = F}\nknitr::opts_chunk$set(error = TRUE, message = TRUE)\n```\n\n```{r message=FALSE}\nlibrary(sf)\nlibrary(tmap)\nlibrary(dplyr)\nlibrary(wk)\n\nsf::sf_use_s2(FALSE)\n```\n\n## A simple square\nJust to get things set up let's make a simple square.\n\n```{r}\nsquare <- (st_polygon(list(matrix(c(-1, -1, 1, -1, 1, 1, -1, 1, -1, -1), \n                                 5, 2, byrow = TRUE))) * 0.5 + c(1, 0)) %>%\n  st_sfc()\n\ntm_shape(square) + \n  tm_borders(col = \"red\") + \n  tm_grid()\n```\n\n## Simple transformations\nIn the code above, we made a polygon and multipled it by 0.5, then added `c(1,0)` to it. This had the effect of scaling it by 0.5 andthen translating it by the vector $$\\left[\\begin{array}{c}1\\\\0\\end{array}\\right]$$\n\nThese unlikely looking operations are [perfectly valid](https://r-spatial.github.io/sf/articles/sf3.html#affine-transformations), although they feel a bit 'off'.\n\nEven more unlikely is that you can _multiply an `sf` object by a matrix_...\n\n```{r}\nang <- pi / 6\nmat <- matrix(c(cos(ang), -sin(ang), \n                sin(ang),  cos(ang)), 2, 2, byrow = TRUE)\n(square * mat) %>% \n  plot()\n```\n\nThis is very handy... but probably also a bad idea! Because you have to post-multiply by the matrix, the sense of many [affine transformations](https://en.wikipedia.org/wiki/Affine_transformation) is reversed and construction of the matrix is not 'by the book'. _Usually_ the affine transformation matrix $\\mathbf{A}$ for an anti-clockwise rotation by angle $\\theta$ around the origin, would be\n\n$$\n\\mathbf{A} = \n\\left[\\begin{array}{cc}\n\\cos\\theta & -\\sin\\theta \\\\\n\\sin\\theta & \\cos\\theta\n\\end{array}\\right]\n$$\n\nHere, because we are post-multiplying the rotation will be in the other direction... and to rotate anti-clockwise, you use the $-\\mathbf{A}=\\mathbf{A}^T$\n\n$$\n-\\mathbf{A} = \n\\left[\\begin{array}{cc}\n-\\cos\\theta & \\sin\\theta \\\\\n-\\sin\\theta & -\\cos\\theta\n\\end{array}\\right] = \n\\left[\\begin{array}{cc}\n\\cos\\theta & \\sin\\theta \\\\\n-\\sin\\theta & \\cos\\theta\n\\end{array}\\right] = \\mathbf{A}^\\mathrm{T}\n$$\n \nThis means that if you are doing any serious affine transforming of `sf` shapes at a low-level in R spatial, I  recommend either writing some wrapper functions that generate and apply the necessary matrices on the fly, or, probably better yet, using the [`wk` package](https://paleolimbot.github.io/wk/) which has proper support for affine transformations. \n\n# Wrapper functions for the 'native' matrix operations\nTaking the `wk` approach, I will show what you can do below. Making similar functions that just post-multiply shapes or add vectors to them instead is left as an exercise for the reader...\n\nFor example a rotation function might look something like\n\n```{r}\nrotate_sf <- function(shp, angle) {\n  wk::wk_transform(shp, wk::wk_affine_rotate(angle))\n}\n```\n\nand this can be applied like this\n\n```{r}\nbase_s <- st_polygon(list(matrix(c(.25, 0.25, \n                                   1.5, 0.25, \n                                   1.5, 1.5, \n                                   .25, 1.5, \n                                   .25, .25), \n                                 nrow = 5, ncol = 2, byrow = TRUE)))\nplot(base_s, xlim = c(-2, 2), ylim = c(-2, 2), \n     col = \"lightgrey\", border = NA)\nfor (a in seq(0, 330, 30)) {\n  plot(rotate_sf(base_s, a), add = TRUE)\n}\n```\n\nOr you might want to make multiple copies of a basic unit at a series of locations on a grid. First, make a function that will translate a shape by a vector.\n\n```{r}\ntranslate_shape <- function(shape, translation) {\n  wk::wk_transform(shape, wk::wk_affine_translate(translation[1], translation[2]))\n}\n```\n\nGenerate a set of translations\n\n```{r}\ngrid <- expand.grid(x = 0:19 * 1.2 + 1, y = 0:19 * 1.2 + 1)\nsquares <- list()\nfor (i in seq(nrow(grid))) {\n  squares <- append(squares, \n                    list(translate_shape(square, c(grid$x[i], grid$y[i]))))\n}\nsquares %>% sapply(\"[\") %>% st_sfc() %>%\n  plot()\n```\nThe `wk` functions also allow you to compose complex transformations from several steps. For example a function to rotate a shape around its own centre, i.e., not around the origin at $(0,0)$ requires moving the shape so that its centroid is at the origin, performing the rotation, then moving it back:\n\n```{r}\nrotate_around_centroid <- function(shape, angle) {\n  centroid <- st_centroid(shape) %>%\n    st_coordinates() %>%\n    c()\n  transformation <- wk::wk_affine_compose(\n    wk::wk_affine_translate(-centroid[1], -centroid[2]),\n    wk::wk_affine_rotate(angle),\n    wk::wk_affine_translate(centroid[1], centroid[2])\n  )\n  wk::wk_transform(shape, transformation)\n}\n```\n\nAnd here's that in action\n\n```{r}\nplot(square, xlim = c(-1, 1), ylim = c(-1, 1))\nfor (a in seq(30, 90, 30)) {\n  plot(rotate_around_centroid(square, a), add = TRUE)\n}\n```\n","srcMarkdownNoYaml":"\n\n```{r setup, cache = F}\nknitr::opts_chunk$set(error = TRUE, message = TRUE)\n```\n\n## Packages\n```{r message=FALSE}\nlibrary(sf)\nlibrary(tmap)\nlibrary(dplyr)\nlibrary(wk)\n\nsf::sf_use_s2(FALSE)\n```\n\n## A simple square\nJust to get things set up let's make a simple square.\n\n```{r}\nsquare <- (st_polygon(list(matrix(c(-1, -1, 1, -1, 1, 1, -1, 1, -1, -1), \n                                 5, 2, byrow = TRUE))) * 0.5 + c(1, 0)) %>%\n  st_sfc()\n\ntm_shape(square) + \n  tm_borders(col = \"red\") + \n  tm_grid()\n```\n\n## Simple transformations\nIn the code above, we made a polygon and multipled it by 0.5, then added `c(1,0)` to it. This had the effect of scaling it by 0.5 andthen translating it by the vector $$\\left[\\begin{array}{c}1\\\\0\\end{array}\\right]$$\n\nThese unlikely looking operations are [perfectly valid](https://r-spatial.github.io/sf/articles/sf3.html#affine-transformations), although they feel a bit 'off'.\n\nEven more unlikely is that you can _multiply an `sf` object by a matrix_...\n\n```{r}\nang <- pi / 6\nmat <- matrix(c(cos(ang), -sin(ang), \n                sin(ang),  cos(ang)), 2, 2, byrow = TRUE)\n(square * mat) %>% \n  plot()\n```\n\nThis is very handy... but probably also a bad idea! Because you have to post-multiply by the matrix, the sense of many [affine transformations](https://en.wikipedia.org/wiki/Affine_transformation) is reversed and construction of the matrix is not 'by the book'. _Usually_ the affine transformation matrix $\\mathbf{A}$ for an anti-clockwise rotation by angle $\\theta$ around the origin, would be\n\n$$\n\\mathbf{A} = \n\\left[\\begin{array}{cc}\n\\cos\\theta & -\\sin\\theta \\\\\n\\sin\\theta & \\cos\\theta\n\\end{array}\\right]\n$$\n\nHere, because we are post-multiplying the rotation will be in the other direction... and to rotate anti-clockwise, you use the $-\\mathbf{A}=\\mathbf{A}^T$\n\n$$\n-\\mathbf{A} = \n\\left[\\begin{array}{cc}\n-\\cos\\theta & \\sin\\theta \\\\\n-\\sin\\theta & -\\cos\\theta\n\\end{array}\\right] = \n\\left[\\begin{array}{cc}\n\\cos\\theta & \\sin\\theta \\\\\n-\\sin\\theta & \\cos\\theta\n\\end{array}\\right] = \\mathbf{A}^\\mathrm{T}\n$$\n \nThis means that if you are doing any serious affine transforming of `sf` shapes at a low-level in R spatial, I  recommend either writing some wrapper functions that generate and apply the necessary matrices on the fly, or, probably better yet, using the [`wk` package](https://paleolimbot.github.io/wk/) which has proper support for affine transformations. \n\n# Wrapper functions for the 'native' matrix operations\nTaking the `wk` approach, I will show what you can do below. Making similar functions that just post-multiply shapes or add vectors to them instead is left as an exercise for the reader...\n\nFor example a rotation function might look something like\n\n```{r}\nrotate_sf <- function(shp, angle) {\n  wk::wk_transform(shp, wk::wk_affine_rotate(angle))\n}\n```\n\nand this can be applied like this\n\n```{r}\nbase_s <- st_polygon(list(matrix(c(.25, 0.25, \n                                   1.5, 0.25, \n                                   1.5, 1.5, \n                                   .25, 1.5, \n                                   .25, .25), \n                                 nrow = 5, ncol = 2, byrow = TRUE)))\nplot(base_s, xlim = c(-2, 2), ylim = c(-2, 2), \n     col = \"lightgrey\", border = NA)\nfor (a in seq(0, 330, 30)) {\n  plot(rotate_sf(base_s, a), add = TRUE)\n}\n```\n\nOr you might want to make multiple copies of a basic unit at a series of locations on a grid. First, make a function that will translate a shape by a vector.\n\n```{r}\ntranslate_shape <- function(shape, translation) {\n  wk::wk_transform(shape, wk::wk_affine_translate(translation[1], translation[2]))\n}\n```\n\nGenerate a set of translations\n\n```{r}\ngrid <- expand.grid(x = 0:19 * 1.2 + 1, y = 0:19 * 1.2 + 1)\nsquares <- list()\nfor (i in seq(nrow(grid))) {\n  squares <- append(squares, \n                    list(translate_shape(square, c(grid$x[i], grid$y[i]))))\n}\nsquares %>% sapply(\"[\") %>% st_sfc() %>%\n  plot()\n```\nThe `wk` functions also allow you to compose complex transformations from several steps. For example a function to rotate a shape around its own centre, i.e., not around the origin at $(0,0)$ requires moving the shape so that its centroid is at the origin, performing the rotation, then moving it back:\n\n```{r}\nrotate_around_centroid <- function(shape, angle) {\n  centroid <- st_centroid(shape) %>%\n    st_coordinates() %>%\n    c()\n  transformation <- wk::wk_affine_compose(\n    wk::wk_affine_translate(-centroid[1], -centroid[2]),\n    wk::wk_affine_rotate(angle),\n    wk::wk_affine_translate(centroid[1], centroid[2])\n  )\n  wk::wk_transform(shape, transformation)\n}\n```\n\nAnd here's that in action\n\n```{r}\nplot(square, xlim = c(-1, 1), ylim = c(-1, 1))\nfor (a in seq(30, 90, 30)) {\n  plot(rotate_around_centroid(square, a), add = TRUE)\n}\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"affine-transformations-of-sf-objects.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.551","theme":"lux","title-block-banner":true,"title":"Affine transformations of sf objects","description":"Manipulating simple features in `sf` is sorta simple, sorta not...\n","author":"David O'Sullivan","categories":["R","spatial"],"draft":false,"date":"04-02-2024"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}