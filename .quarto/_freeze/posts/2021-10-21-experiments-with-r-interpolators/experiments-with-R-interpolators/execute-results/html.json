{
  "hash": "d659b3a6add2d7d92b220d78e157dff5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Experiments with R interpolators\"\ndescription: |\n  Messing around with interpolating via a triangulation to apply coordinate\n  transformations\ndate: 06-21-2022\noutput:\n  distill::distill_article\ndraft: false\n---\n\n\n## Load libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(akima)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(sf)\n```\n:::\n\n\nThis notebook shows how we can use a set of paired 'control points' of a projection to interpolate unknown locations to that projection. The basic setup is a table of pairs of coordinate pairs $(x_1,y_1)$ and $(x_2,y_2)$ representing the same location in two different coordinate systems. Given this setup assuming that the projection is well-behaved with no serious 'breaks' we can form an empirical projection to estimate locations in one coordinate system for 'unknown' locations in the other. See, for example\n\n+ Gaspar J A, 2011, “Using Empirical Map Projections for Modeling Early Nautical Charts”, in _Advances in Cartography and GIScience_ Ed A Ruas (Springer Berlin Heidelberg), pp 227–247, http://link.springer.com/10.1007/978-3-642-19214-2_15\n\n## Get input datasets\n### The empirical projection\nThis file contains points on a global grid system, generated using the [dggridR](https://github.com/r-barnes/dggridR/) package. We can see the points in 'lat-lon' space below. Note how because this is a global grid system the points appear to 'thin out' towards the poles. This is an artifact of plotting the points in lat-lon, which is also explored in [this post](../2021-10-20-random-even-points-on-the-globe/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemp_proj <- read.csv(\"dgg-2432-no-offsets-p4-briesemeister.csv\")\nggplot(emp_proj) +\n  geom_point(aes(x = lon, y = lat), size = 0.05) +\n  coord_equal()\n```\n\n::: {.cell-output-display}\n![](experiments-with-R-interpolators_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nInspection of the data shows we have two sets of coordinates `lon`, `lat` and `x`, `y`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(emp_proj)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID dir     lon      lat          x       y\n1  0   .   11.25 58.28253  -428675.9 1520344\n2  1   . -168.75 58.28253 -1197290.8 7794188\n3  2   . -168.75 65.09003 -1120150.7 7234575\n4  3   . -168.75 72.07407 -1048583.9 6613223\n5  4   . -168.75 79.18998  -973499.6 5945572\n6  5   . -168.75 86.38746  -892969.4 5242144\n```\n\n\n:::\n:::\n\n\nThis projection is [Briesemeister](https://www.map-projections.net/single-view/briesemeister-v2), which is an oblique form of the Hammer-Aitoff projection. See \n\n+ Briesemeister W, 1953, “A New Oblique Equal-Area Projection” _Geographical Review_ **43**(2) 260\n\nIt's possible to form this projection with a proj string, but it is not commonly supported in GIS, and who knows proj strings that well?! For the record, this is the string you are looking for:\n\n    +proj=ob_tran +o_proj=hammer +o_lat_p=45 +o_lon_p=-10 +lon_0=0 +R=6371007\n\n### A sample dataset\nWe also want a set of points to project, and what better than a world map. Note that we can only project points, so this is points along world coastlines, not polygons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npts <- read.csv(\"world_better.csv\") %>%\n  dplyr::select(lon, lat)\n\n# sanity check with a map\nggplot(pts) + \n  geom_point(aes(x = lon, y = lat), size = 0.05) + \n  coord_equal()\n```\n\n::: {.cell-output-display}\n![](experiments-with-R-interpolators_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Triangles interpolator\nThere are many different ways we can do this kind of interpolation. The simplest is based on triangulation. This method is available in the package `interp` but also in `akima` which is **much** quicker. The output x and y coordinates are formed by interpolating as shown below. `x` and `y` are the known locations of the input coordinate, which here are the longitude and latitude in out empirical projection dataset `emp_proj`. The desired outputs are at the longitude and latitude coordinates in the world maps dataset `pts`. And we do the interpolation twice, once for the `x` coordinate and once for the `y` coordinate in our target projection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_out <- akima::interpp(x = emp_proj$lon, y = emp_proj$lat, z = emp_proj$x,\n                xo = pts$lon, yo = pts$lat)\ny_out <- akima::interpp(x = emp_proj$lon, y = emp_proj$lat, z = emp_proj$y,\n                xo = pts$lon, yo = pts$lat)\n```\n:::\n\n\nNow make up a results data table and map it. `akima` puts the result in a column `z` in its output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- data.frame(x = x_out$z, y = y_out$z)\nggplot(result) + \n  geom_point(aes(x = x, y = y), size = 0.05) + \n  coord_equal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 127 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](experiments-with-R-interpolators_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Apply the empirical projection's cut region\nWhat are those dots across the southern area of the map? These are points that happen to fall in triangles in the first coordinate system (i.e. lon-lat) where one corner of the triangle lies on a different side of a discontinuity in the projection than the other corners. We should avoid projecting points inside these triangles because they project (as we can see!) unreliably.\n\nFor the Briesemeister projection we know the precise location of this discontinuity, and have prepared a file delineating the 'cut' position. We can use this to remove points from the sample dataset that lie inside triangles that intersect the cut region.\n\nFirst, here is the discontinuity. Points close to or on this line could end up in very different parts of the projected output and so are 'unsafe' to project using our interpolation-based approximation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncut_sf <- st_read(\"briesemeister-cut.geojson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `briesemeister-cut' from data source \n  `/Users/david/Documents/code/dosull.github.io/posts/2021-10-21-experiments-with-r-interpolators/briesemeister-cut.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1 feature and 0 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -179.8892 ymin: -82.94613 xmax: -0.3442386 ymax: 44.55223\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(cut_sf) + \n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](experiments-with-R-interpolators_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nNow triangulate the empirical projection data points, and assemble a polygon from all those triangles that are intersected by the discontinuity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make the cut region into a sf dataset\nemp_proj_sf <- emp_proj %>%\n  st_as_sf(coords = c(\"lon\", \"lat\")) %>%\n  st_set_crs(4326)\n\ntriangles <- emp_proj_sf %>%\n  st_union() %>%\n  st_triangulate() %>%   # triangulation of empirical projection points\n  st_cast() %>%\n  st_as_sf() \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in st_triangulate.sfc(.): st_triangulate does not correctly triangulate\nlongitude/latitude data\n```\n\n\n:::\n\n```{.r .cell-code}\ncut_triangles <- triangles %>%\n  st_filter(cut_sf)\n\ncut_region_sf <- cut_triangles %>% \n  st_filter(cut_sf) %>%\n  st_union() %>%       \n  st_as_sf() \n```\n:::\n\n\nWe quite reasonably get a warning that triangulation doesn't really apply to geographical coordinates, but... `akima` did the interpolation by triangulating these points and it doesn't know it's unsafe (because it's not a geospatial package). It's not actually 'unsafe' as such in this case, because we aren't using the triangulation for its metric properties anyway. So... we ignore this warning and plot this to see what we are dealing with\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(triangles) +\n  geom_sf(colour = \"grey\") + \n  geom_sf(data = cut_triangles, fill = \"grey\", colour = \"white\") +\n  geom_sf(data = cut_region_sf, fill = \"#00000000\", colour = \"black\") +\n  geom_sf(data = cut_sf, color = \"red\")\n```\n\n::: {.cell-output-display}\n![](experiments-with-R-interpolators_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nNow we use `st_disjoint` to remove points in the data to project that are inside the cut region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npts_to_project_sp <- pts %>%\n  st_as_sf(coords = c(\"lon\", \"lat\")) %>%\n  st_set_crs(4326) %>%\n  st_filter(cut_region_sf, .predicate = st_disjoint) %>%\n  as(\"Spatial\")\n```\n:::\n\n\nThe last step converts the points to the `SpatialPointsDataFrame` format of the `sp` package, which `akima` can also work with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we also need the empirical projection data in the sp format\nemp_proj_sp <- emp_proj_sf %>%\n  as(\"Spatial\")\n\nx <- akima::interpp(emp_proj_sp, z = c(\"x\"), xo = pts_to_project_sp, linear = TRUE)\ny <- akima::interpp(emp_proj_sp, z = c(\"y\"), xo = pts_to_project_sp, linear = TRUE)\n```\n:::\n\n\nA bit unexpectedly, `akima` outputs the data to a two column dataframe with the interpolated values in a column with the same name as the input data, so getting the results into a final output table is as below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- data.frame(x = x$x, y = y$y)\nggplot(result) +\n  geom_point(aes(x = x, y = y), size = 0.05) + \n  coord_equal()\n```\n\n::: {.cell-output-display}\n![](experiments-with-R-interpolators_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nAnd those rogue dots are all gone!\n",
    "supporting": [
      "experiments-with-R-interpolators_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}